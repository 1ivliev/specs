/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Qase.io API
 * You can use our API to access Qase.io API endpoints, which allows to retrieve information about entities stored in database and perform actions with them. The API is organized around REST. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.qase.io/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {InlineResponse200Result}
     * @memberof InlineResponse200
     */
    result?: InlineResponse200Result;
}
/**
 * 
 * @export
 * @interface InlineResponse200Result
 */
export interface InlineResponse200Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200Result
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200Result
     */
    filtered?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200Result
     */
    count?: number;
    /**
     * 
     * @type {Projects}
     * @memberof InlineResponse200Result
     */
    entities?: Projects;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    code?: string;
    /**
     * 
     * @type {ProjectCounts}
     * @memberof Project
     */
    counts?: ProjectCounts;
}
/**
 * 
 * @export
 * @interface ProjectCounts
 */
export interface ProjectCounts {
    /**
     * 
     * @type {number}
     * @memberof ProjectCounts
     */
    cases?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectCounts
     */
    suites?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectCounts
     */
    milestones?: number;
    /**
     * 
     * @type {ProjectCountsRuns}
     * @memberof ProjectCounts
     */
    runs?: ProjectCountsRuns;
    /**
     * 
     * @type {ProjectCountsDefects}
     * @memberof ProjectCounts
     */
    defects?: ProjectCountsDefects;
}
/**
 * 
 * @export
 * @interface ProjectCountsDefects
 */
export interface ProjectCountsDefects {
    /**
     * 
     * @type {number}
     * @memberof ProjectCountsDefects
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectCountsDefects
     */
    open?: number;
}
/**
 * 
 * @export
 * @interface ProjectCountsRuns
 */
export interface ProjectCountsRuns {
    /**
     * 
     * @type {number}
     * @memberof ProjectCountsRuns
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectCountsRuns
     */
    active?: number;
}
/**
 * 
 * @export
 */
export type Projects = Array<Project>
/**
 * ProjectsApi - fetch parameter creator
 * @export
 */
export const ProjectsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method allows to retrieve all projects available for your account. You can you limit and offset params to paginate. 
         * @summary Get All Projects.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectList(limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/project`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This method allows to retrieve all projects available for your account. You can you limit and offset params to paginate. 
         * @summary Get All Projects.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectList(limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = ProjectsApiFetchParamCreator(configuration).projectList(limit, offset, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * This method allows to retrieve all projects available for your account. You can you limit and offset params to paginate. 
         * @summary Get All Projects.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectList(limit?: number, offset?: number, options?: any) {
            return ProjectsApiFp(configuration).projectList(limit, offset, options)(fetch, basePath);
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * This method allows to retrieve all projects available for your account. You can you limit and offset params to paginate. 
     * @summary Get All Projects.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectList(limit?: number, offset?: number, options?: any) {
        return ProjectsApiFp(this.configuration).projectList(limit, offset, options)(this.fetch, this.basePath);
    }

}
